using System;
using System.Threading;
using System.Threading.Tasks;

namespace project_euler.Solutions
{
    class Solution_12 : Solution
    {
        public override string ProblemDefinition =>
            "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.\r\n" + 
            "The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\r\n" +
            "Let us list the factors of the first seven triangle numbers:\r\n" +
            "    1: 1\r\n" +
            "    3: 1, 3\r\n" +
            "    6: 1, 2, 3, 6\r\n" +
            "   10: 1, 2, 5, 10\r\n" +
            "   15: 1, 3, 5, 15\r\n" +
            "   21: 1, 3, 7, 21\r\n" +
            "   28: 1, 2, 4, 7, 14, 28\r\n" +
            "We can see that 28 is the first triangle number to have over five divisors.\r\n" +
            "What is the value of the first triangle number to have over five hundred divisors ?";

        public override async Task GetAnswer(CancellationToken token, IProgress<int> progress = null)
        {
            Task task = Task.Run(() => triangleCalc(token, progress));
            await task;
        }

        private void triangleCalc(CancellationToken token, IProgress<int> progress = null)
        {
            int triangleNumberMax = 1000000;
            int previousPercent = 0;

            for (int index = 1; index <= triangleNumberMax; index++)
            {
                // Stop if cancelled
                if (token.IsCancellationRequested)
                {
                    Answer = "\r\nProblem cancelled";
                    return;
                }

                // Report progress if appropriate
                if (progress != null)
                {
                    double percent = 100 * (double)index / triangleNumberMax;
                    int nearestPercent = (int)Math.Floor(percent);
                    if (nearestPercent != previousPercent)
                    {
                        progress.Report(nearestPercent);
                    }
                    previousPercent = nearestPercent;
                }

                // Calculate the triangle number
                int triangleCalc = 0;
                for (int index_t = 1; index_t <= index; index_t++)
                {
                    triangleCalc += index_t;
                }

                // Calculate the number of divisors
                int numberOfDivisors = 1; // start with 1 to include the triangle number itself as a divisor, this does not need to be calculated.
                for (int divisor = 1; divisor <= triangleCalc / 2; divisor++)
                {
                    if (triangleCalc % divisor == 0)
                    {
                        //addToOutput("Divisor = " + divisor);
                        numberOfDivisors++;
                    }
                }
                if (numberOfDivisors >= 500)
                {
                    // Report progress complete
                    if (progress != null)
                    {
                        progress.Report(100);
                    }
                    Answer = $"Triangle {index} = {triangleCalc} has {numberOfDivisors} divisors";
                    return;
                }
            }

            // Report progress complete
            if (progress != null)
            {
                progress.Report(100);
            }
            Answer = "Problem not solved.";
        }
    }
}
