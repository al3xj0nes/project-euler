using System;
using System.Threading;
using System.Threading.Tasks;

namespace project_euler.Solutions
{
    class Solution_02 : Solution
    {
        public override string ProblemDefinition =>
            "Each new term in the Fibonacci sequence is generated by adding the previous two terms.\r\n" +
            "By starting with 1 and 2, the first 10 terms will be:\r\n" +
            "   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\r\n" +
            "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";

        public override async Task GetAnswer(CancellationToken token, IProgress<int> progress = null)
        {
            Task task = Task.Run(() => sumEvenFibVals(token, progress));
            await task;
        }

        private void sumEvenFibVals(CancellationToken token, IProgress<int> progress = null)
        {
            int val1 = 1;
            int val2 = 2;
            int fibTest = 0;
            int sumEvenFibVals = 2; // Initialize with 2 as val2 (2) need to be added on initially.
            int upperLimit = 4000000;
            bool fourMilReached = false;
            int previousPercent = 0;

            while (!fourMilReached)
            {
                // Stop if cancelled
                if (token.IsCancellationRequested)
                {
                    Answer = "\r\nProblem cancelled";
                    return;
                }

                // Report progress if appropriate
                if (progress != null)
                {
                    double percent = 100 * (double)fibTest / upperLimit;
                    int nearestPercent = (int)Math.Floor(percent);
                    if (nearestPercent != previousPercent)
                    {
                        progress.Report(nearestPercent);
                    }
                    previousPercent = nearestPercent;
                }

                fibTest = val1 + val2;

                // Test if limit reached
                if (fibTest > upperLimit)
                {
                    fourMilReached = true;
                }
                // Add if even
                else
                {
                    val1 = val2;
                    val2 = fibTest;
                    if (fibTest % 2 == 0)
                    {
                        sumEvenFibVals += fibTest;
                    }
                }
            }

            // Report progress complete
            if (progress != null)
            {
                progress.Report(100);
            }
            Answer = $"Total Sum = {sumEvenFibVals}";
        }
    }
}
