using project_euler.Solutions;
using System.Windows;

namespace project_euler
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        Functions functions = new Functions();

        private void addToOutput(string msg)
        {
            txtOutputDisplay.AppendText(msg + "\r\n");
            txtOutputDisplay.ScrollToEnd();
        }

        private void btnRunSolution_Click(object sender, RoutedEventArgs e)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();
            // Increment selection made as combo box indexes from 0. Solutions index from 1.
            int selectionMade = comboSolutionSelection.SelectedIndex + 1;
            addToOutput("———————————————————————————————————————————————————————");
            if (comboSolutionSelection.SelectedIndex >= 0)
            {
                addToOutput("Loading solution for " + comboSolutionSelection.Text);
            }
            switch (selectionMade)
            {
                case 1:
                    projectEuler_Solution1();
                    break;
                case 2:
                    projectEuler_Solution2();
                    break;
                case 3:
                    projectEuler_Solution3();
                    break;
                case 4:
                    projectEuler_Solution4();
                    break;
                case 5:
                    projectEuler_Solution5();
                    break;
                case 6:
                    projectEuler_Solution6();
                    break;
                case 7:
                    projectEuler_Solution7();
                    break;
                case 8:
                    projectEuler_Solution8();
                    break;
                case 9:
                    projectEuler_Solution9();
                    break;
                default:
                    addToOutput("No implementation has been written for this function yet");
                    break;
            }
            watch.Stop();
            addToOutput("Time elapsed: " + watch.ElapsedMilliseconds + "ms");
        }

        private void projectEuler_Solution1()
        {
            Solution_1 solution_1 = new Solution_1();

            addToOutput("If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\r\n" +
                        "The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.\r\n" +
                        $"Total Sum = { solution_1.totalSum() }");
        }
        private void projectEuler_Solution2()
        {
            Solution_2 solution_2 = new Solution_2();

            addToOutput("Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\r\n" +
                        "                                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\r\n" +
                        "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\r\n" +
                        $"Total Sum = {solution_2.sumEvenFibVals()}");
        }
        private void projectEuler_Solution3()
        {
            Solution_3 solution_3 = new Solution_3();

            long valToInspect = 600851475143;

            addToOutput("The prime factors of 13195 are 5, 7, 13 and 29.\r\n" +
                        "What is the largest prime factor of the number 600851475143 ?\r\n" +
                        $"Largest prime of {valToInspect} = {solution_3.largestPrime(valToInspect)}");
        }
        private void projectEuler_Solution4()
        {
            Solution_4 solution_4 = new Solution_4();

            addToOutput("A palindromic number reads the same both ways. The largest palindrome made from the product of two 2 - digit numbers is 9009 = 91 × 99.\r\n" +
                        "Find the largest palindrome made from the product of two 3 - digit numbers.\r\n" +
                        $"Largest palindrome = {solution_4.largestPalindrome()}");
        }
        private void projectEuler_Solution5()
        {
            Solution_5 solution_5 = new Solution_5();

            addToOutput("2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\r\n" +
                        "What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?\r\n" +
                        $"The smallest value divisible by 1 through 20 = {solution_5.valueToInspect()}");
        }
        private void projectEuler_Solution6()
        {
            Solution_6 solution_6 = new Solution_6();

            addToOutput("The sum of the squares of the first ten natural numbers is,\r\n" +
                        "        1^2 + 2^2 + ... + 10^2 = 385\r\n" +
                        "The square of the sum of the first ten natural numbers is,\r\n" +
                        "        (1 + 2 + ... + 10)^2 = 55^2 = 3025\r\n" +
                        "Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\r\n" +
                        "Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\r\n" +
                        $"Difference between = {solution_6.diffOfSqAndSum()}");
        }
        private void projectEuler_Solution7()
        {
            Solution_7 solution_7 = new Solution_7();

            addToOutput("By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\r\n" +
                        "What is the 10 001st prime number ?\r\n" +
                        $"The 10,001st prime number = {solution_7.primeCalcVal()}");
        }
        private void projectEuler_Solution8()
        {
            Solution_8 solution_8 = new Solution_8();

            addToOutput("The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\r\n" +
                        "		73167176531330624919225119674426574742355349194934\r\n" +
                        "		96983520312774506326239578318016984801869478851843\r\n" +
                        "		85861560789112949495459501737958331952853208805511\r\n" +
                        "		12540698747158523863050715693290963295227443043557\r\n" +
                        "		66896648950445244523161731856403098711121722383113\r\n" +
                        "		62229893423380308135336276614282806444486645238749\r\n" +
                        "		30358907296290491560440772390713810515859307960866\r\n" +
                        "		70172427121883998797908792274921901699720888093776\r\n" +
                        "		65727333001053367881220235421809751254540594752243\r\n" +
                        "		52584907711670556013604839586446706324415722155397\r\n" +
                        "		53697817977846174064955149290862569321978468622482\r\n" +
                        "		83972241375657056057490261407972968652414535100474\r\n" +
                        "		82166370484403199890008895243450658541227588666881\r\n" +
                        "		16427171479924442928230863465674813919123162824586\r\n" +
                        "		17866458359124566529476545682848912883142607690042\r\n" +
                        "		24219022671055626321111109370544217506941658960408\r\n" +
                        "		07198403850962455444362981230987879927244284909188\r\n" +
                        "		84580156166097919133875499200524063689912560717606\r\n" +
                        "		05886116467109405077541002256983155200055935729725\r\n" +
                        "		71636269561882670428252483600823257530420752963450\r\n" +
                        "Find the thirteen adjacent digits in the 1000 - digit number that have the greatest product.\r\n" + 
                        "What is the value of this product ?\r\n" +
                        $"Largest product = {solution_8.ProductAndDigits().LargestProduct} from adjacent values {solution_8.ProductAndDigits().Products}");
        }
        private void projectEuler_Solution9()
        {
            //TODO: Add solution 9
        }

    }
}